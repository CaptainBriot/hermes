#!/bin/env python
import logging
import logging.handlers
import sys
import argparse
import traceback
import asyncio

import pantheon.hermes

LOGGER = logging.getLogger(__name__)


def init_logging(options):
    stdout_handler = logging.StreamHandler(sys.stdout)
    stdout_handler.setLevel(logging.DEBUG)

    if sys.stdout.isatty():
        stdout_fmt = '%(asctime)s|%(levelname)s|%(name)s|%(message)s|%(filename)s|%(lineno)s'
    else:
        stdout_fmt = '%(levelname)s|%(name)s|%(message)s|%(filename)s|%(lineno)s'

    stdout_handler.setFormatter(logging.Formatter(fmt=stdout_fmt))

    if options.verbosity:
        level = logging.DEBUG
    elif options.quiet:
        level = logging.INFO
    else:
        level = logging.DEBUG

    if options.verbosity >= 2:
        pantheon.hermes.loop.set_debug(True)

    logging.root.setLevel(level)
    logging.root.addHandler(stdout_handler)


class Claymore:
    def __init__(self):
        self.factory = asyncio.create_subprocess_exec(
            './ethdcrminer64', '-epool', 'us1.ethermine.org:4444', '-ewal',
            '0x57b5F2cD0E014d3ABba44A7bc69D8Ec07d36489A.miner-0000', '-epsw', 'x', '-mode', '1', '-allpools', '1',
            '-colors', '0',
            loop=pantheon.hermes.loop, stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.STDOUT, cwd='/tmp/miner')
        self.process = None

    async def __call__(self):
        self.process = await self.factory

        while True:
            line = await self.process.stdout.readline()

            if not line:
                break

            try:
                line = line.decode('utf-8').strip()
            except UnicodeDecodeError:
                pass

            if line:
                LOGGER.debug(line)

        await self.process.wait()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='count', dest='verbosity', default=0)
    parser.add_argument('-q', '--quiet', action='store_true', dest='quiet', default=False)
    options = parser.parse_args()

    init_logging(options)

    LOGGER.debug('Supported GPUs are: %s', pantheon.hermes.gpu.REGISTRY)

    power = pantheon.hermes.power.PowerControl()
    power()

    overclock = pantheon.hermes.overclock.OverclockControl()
    overclock()

    fan = pantheon.hermes.fan.FanControl()
    pantheon.hermes.loop.create_task(fan())

    claymore = Claymore()
    pantheon.hermes.loop.create_task(claymore())

    try:
        pantheon.hermes.loop.run_forever()
    except Exception as ex:
        LOGGER.error(ex)
        LOGGER.debug(traceback.format_exc())
    finally:
        pantheon.hermes.loop.close()
        claymore.process.terminate()


if __name__ == '__main__':
    main()
