#!/bin/env python
import logging
import logging.handlers
import sys
import argparse

import pantheon.hermes


def init_logging(options):
    stdout_handler = logging.StreamHandler(sys.stdout)
    stdout_handler.setLevel(logging.DEBUG)
    stdout_fmt = '%(asctime)s|%(levelname)s|%(name)s|%(message)s|%(filename)s|%(lineno)s'
    stdout_handler.setFormatter(logging.Formatter(fmt=stdout_fmt))

    syslog_handler = logging.handlers.SysLogHandler(address='/dev/log')
    syslog_handler.setLevel(logging.DEBUG)
    syslog_fmt = '%(name)s[%(process)d]: %(message)s (%(filename)s|%(lineno)s)'
    syslog_handler.setFormatter(logging.Formatter(fmt=syslog_fmt))

    if options.verbosity:
        level = logging.DEBUG
    elif options.quiet:
        level = logging.INFO
    else:
        level = logging.DEBUG

    if options.verbosity >= 2:
        pantheon.hermes.engine.set_debug(True)

    logging.root.setLevel(level)
    logging.root.addHandler(stdout_handler)
    logging.root.addHandler(syslog_handler)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='count', dest='verbosity', default=0)
    parser.add_argument('-q', '--quiet', action='store_true', dest='quiet', default=False)
    options = parser.parse_args()

    init_logging(options)

    fan = pantheon.hermes.fan.FanControl()
    pantheon.hermes.engine.create_task(fan())
    pantheon.hermes.engine.run_forever()
    pantheon.hermes.engine.close()


if __name__ == '__main__':
    main()
